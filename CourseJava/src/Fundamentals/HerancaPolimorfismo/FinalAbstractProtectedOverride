---------------------------------  Final  ---------------------------------

A utilização do final em classes e métodos, tem resultados diferentes...

No caso das classes, ao utilizar final, estamos dizendo que a classe X,
não pode possuir subclasses.

Já nos metodos, o final serve para impedir que o metodo seja sobrescrito.

Já nos atributos, quando você declara um atributo como final, você está indicando que o valor desse
atributo não pode ser alterado após ser inicializado. Isso significa que, uma vez
atribuído um valor a um atributo final, ele não pode ser modificado durante a vida do objeto.

---------------------------------  Abstract  ---------------------------------

O Abstract impede que seja criada uma instanciação da superclasse.

ex:

Essa instanciação (1) apresentará um erro dizendo que a classe
Account é abstrata, as outras funcionará perfeitamente.

1- Account acc1 = new Account();
2- Account acc2 = new businessAccount();
3- Account acc3 = new savingsAccount();

---------------------------------  Protected  ---------------------------------

Utilizamos protected ao inves de public ou private, para dar acesso ao atributo
a uma classe que herdou de uma Superclass

Ex:

User {
    private Integer id;
    protected String Name
    private String Email;
}

UserUpdated extends User{
    public String showNameUser(){
        return Name ---> Essa funcionará, afinal o Name é Protected.
    }
    public String showEmailUser(){
            return Email ---> Essa não, pois o email foi definido como private.
    }
}

---------------------------------  Override  ---------------------------------

No Override, sobrescrevemos metodos ja criados em Superclasses..

Ex:

User {
    public String showNameUser(){
        return Name                 ---> Resultado do metodo sem OVERRIDE: {  kaua  }
    }
}

UserUpdated extends User{
    @Override
    public String showNameUser(){
        return "Name: " + Name      ---> Resultado do metodo com OVERRIDE: {  Name: kaua  }
    }
}